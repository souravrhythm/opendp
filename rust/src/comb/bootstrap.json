{
    "make_chain_mt": {
        "description": "Construct the functional composition (`measurement` ○ `transformation`). Returns a Measurement.",
        "features": ["contrib"],
        "args": [
            {
                "name": "measurement",
                "c_type": "const AnyMeasurement *",
                "description": "outer privatizer"
            },
            {
                "name": "transformation",
                "c_type": "const AnyTransformation *",
                "description": "inner query"
            }
        ],
        "ret": {
            "c_type": "FfiResult<AnyMeasurement *>",
            "description": "Measurement representing the chained computation."
        }
    },
    "make_chain_tt": {
        "description": "Construct the functional composition (`transformation1` ○ `transformation0`). Returns a Transformation.",
        "features": ["contrib"],
        "args": [
            {
                "name": "transformation1",
                "c_type": "const AnyTransformation *",
                "description": "outer transformation"
            },
            {
                "name": "transformation0",
                "c_type": "const AnyTransformation *",
                "description": "inner transformation"
            }
        ],
        "ret": {
            "c_type": "FfiResult<AnyTransformation *>",
            "description": "Transformation representing the chained computation."
        }
    },
    "make_sequential_composition_static_distances": {
        "description": "Construct the DP composition [`measurement0`, `measurement1`, ...]. Returns a Measurement.",
        "args": [
            {
                "name": "measurement_pairs",
                "rust_type": {
                    "origin": "Vec",
                    "args": [{
                        "origin": "Tuple",
                        "args": ["\"AnyMeasurementPtr\"", "QO"]
                    }]
                },
                "c_type": "const AnyObject *",
                "description": "A list of measurements to compose."
            },
            {
                "name": "QO",
                "default": "f64",
                "description": "Type of output distance.",
                "is_type": true
            }
        ],
        "ret": {
            "c_type": "FfiResult<AnyMeasurement *>",
            "description": "Measurement representing the composed transformations."
        }
    },
    "make_population_amplification": {
        "description": "Construct an amplified measurement from a `measurement` with privacy amplification by subsampling.",
        "args": [
            {
                "name": "measurement",
                "c_type": "const AnyMeasurement *",
                "description": "The measurement to amplify."
            },
            {
                "name": "population_size",
                "c_type": "unsigned int",
                "description": "Number of records in population."
            }
        ],
        "ret": {
            "c_type": "FfiResult<AnyMeasurement *>",
            "description": "New measurement with the same function, but an adjusted privacy relation."
        }

    }
}
